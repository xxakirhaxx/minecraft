--Time between running normal system events
local cycle = 5
local monitor = peripheral.wrap("top")
local nuclearControlSystems = {}
local modemSide = "bottom"
local pageSize = 8

--Draws the monitor
--page: int
--current page the monitor is on
local function drawMonitor(page)
	
	local n = 0
	local x = 1
	local y = 2
	local title = "Nuclear Command"
	local w,h = monitor.getSize()
	local totalEU = 0
	
	if page*pageSize + pageSize < #nuclearControlSystems then
		n = page*pageSize + pageSize
	else
		n = #nuclearControlSystems
	end
	
	print("Drawing Title")
	
	monitor.clear()
	monitor.setTextColour(1)
	monitor.setTextScale(1)
	x = math.floor(math.floor(w - string.len(title))/2)
	monitor.setCursorPos(x,y)
	monitor.write(title)
	monitor.setTextScale(1)
	
	print("Done Drawing title.")
	
	print("Beginning for loop")
	
	for i = page*pageSize + 1, n do
		
		local id = nuclearControlSystems[i]
		local msg = {}
		local k = i
		x = (k%1) * 48 + 1
		y = 8 + math.floor(k/1)
		local nPos = 0
		local sPos = 14
		local euPos = 26
		local tPos = 38
		
		rednet.open(modemSide)
		print("requesting info from: "..id)
		rednet.send(id, "getStats")
		id, msg = rednet.receive()
		print("info received from: "..id)
		rednet.close(modemSide)
		
		local temp = math.floor(tonumber(msg.getHeat)/tonumber(msg.getMaxHeat))
		local mode = ""
		totalEU = totalEU + msg.getEUOutput
		
		monitor.setCursorPos(x+nPos,y)
		monitor.write("System #"..id)
		monitor.setCursorPos(x+sPos,y)
		
		if msg.currentMode == "energy" then
			mode = "ENERGY"
			monitor.setTextColour(1)
		elseif msg.currentMode == "cooldown" then
			mode = "COOLDOWN"
			monitor.setTextColour(1)
		else
			mode = "SHUTDOWN"
			monitor.setTextColour(1)
		end
		
		monitor.write(mode)
		monitor.setTextColour(1)
		
		monitor.setCursorPos(x+euPos,y)
		monitor.write("EU: "..msg.getEUOutput)
		monitor.setCursorPos(x+tPos,y)
		monitor.write("Temp: "..temp.."%")
	end
	
	local euString = "Total EU being produced: "..totalEU
	monitor.setTextColour(1)
	monitor.setTextScale(1)
	x = math.floor(math.floor(w - string.len(euString))/2)
	y = 6
	monitor.setCursorPos(x,y)
	monitor.write(euString)
	monitor.setCursorPos(1,1)
	
end

--Verifies if an id is a nuclear system id
--id: int
--Represents a possible computer id
--returns: boolean
--true if id exists in nuclearControlSystems table else false
local function isNuclearSystemId (id)

	for i = 1, #nuclearControlSystems do
		if id == nuclearControlSystems[i] then
			return true
		end
	end

	return false
end

--handles all nuclear system events
--id: int
--a nuclear system id
--msg: table
--table containing nuclear system information
--returns: string
--return message
local function handleNuclearSystemEvent (id, msg)

	local rMsg = ""
	
	return rMsg
end

--Handles any command events
--cmd: string
--String with the format of <cmd> <arg1> <arg2> <arg3> ...
--return: string
--a string return message (mostly for exiting program)
local function handleCommandEvent (cmd)
	--table with element 1 being the command and every element after an arg
	local c = {}
	--return message
	local rMsg = ""
	
	--put individual words from the command into c
	for word in string.gmatch(cmd, "%a+") do 
		c[#c+1] = word 
	end
	
	--handle each command
	
	--quits program
	if c[1] == "quit" then
		rMsg = c[1]
	elseif c[1] == "stop" then
		rednet.open(modemSide)
		rednet.broadcast("stop")
		rednet.close(modemSide)
	elseif c[1] == "start" then
		rednet.open(modemSide)
		rednet.broadcast("start")
		rednet.close(modemSide)
	elseif c[1] == "shutdown" then
		rednet.open(modemSide)
		rednet.broadcast("shutdown")
		rednet.close(modemSide)
	elseif c[1] == "disconnect" then
		rednet.open(modemSide)
		rednet.broadcast("disconnect")
		rednet.close(modemSide)
	elseif c[1] == "draw" then
		drawMonitor(0)
	end
	
	
	return rMsg
end

--Handles normal system events
local function handleSystemEvent ()
	
end

--Handles any rednet events not from nuclear control systems
--id: int
--senders computer id
--msg: string
--senders msg
--returns: string
--return message
local function handleRednetMessageEvent (id, msg)

	local rMsg = ""
	
	return rMsg
end

--Adds nuclear control system to nuclearControlSystems and sends a start command
--id: int
--nuclear control system id
local function addNuclearControlSystem (id)

	print("Adding "..id.." to nuclearControlSystems")
	--add id to table
	nuclearControlSystems[#nuclearControlSystems + 1] = id
	
	--send start message
	rednet.open(modemSide)
	rednet.send(id, "start")
	rednet.close(modemSide)
	
end

--waits for events and performs actions based on them 
-- t: int
-- time between performing system events
local function eventHandler (t)
	local event = ""
	local id = 0
	local msg = ""
	local tid = os.startTimer(t)
	
	--get any event
	rednet.open(modemSide)
	event, id, msg = os.pullEvent()
	print(event, " : " , id, " : ", msg)
	rednet.close(modemSide)
	
	os.cancelTimer(tid)

	
	--handle events
	if isNuclearSystemId(id) then
		msg = handleNuclearSystemEvent(id, msg)
	elseif event == "rednet_message" then
		msg = handleRednetMessageEvent(id, msg)
	elseif event == "key" then
		msg = handleCommandEvent(read())
	end
	
	handleSystemEvent()
	
	return {msg, t}
end 

--initialize program
local function init ()
	
	local event = ""
	local id = 0
	local msg = ""
	
	print("Initializing system...")
	--Clear Monitor and start initialize timer
	monitor.clear()
	os.startTimer(10)
	
	while event ~= "timer" do
		
		rednet.open(modemSide)
		rednet.broadcast("nuclearControl")
		event, id, msg = os.pullEvent()
		rednet.close(modemSide)
		
		if event == "rednet_message" and msg == "nuclearCommand" then
			addNuclearControlSystem(id)
		end
		
	end

	print("Initialization Complete!")
	print("Welcome to Nuclear Command!")
end

--Handles everything before a shutdown occurs
local function shutdown ()

	rednet.open(modemSide)
	rednet.broadcast("shutdown")
	rednet.close(modemSide)
	
end

--main function for program
local function main ()
	
	local t = cycle
	
	--initialize program
	init()
	
	--loop in eventHandler
	while true do
		
		local n = eventHandler(t)
		
		t = n[2]
		
		if type(n[1]) == "string" then
		
			if n[1] == "quit" then
				break
			end
		
		end
		
	end
	
	--shutdown program
	shutdown()
	
end

--Run main program
main()