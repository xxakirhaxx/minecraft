--Time between running normal system events
local cycle = 5
local monitor = peripheral.wrap("top")
local nuclearControlProt = "nuclearControl"
local nuclearControlSystems = {}
local currentPage = 0
local modemSide = "bottom"
local pageSize = 54
local timeOutAttempts = 5
local timeout = 1
local nuclearCommandHost = "nuclearCommand"
local filter = "all"
local filterMsg = "Showing all system entries"

function getPeripheral (name)
	for i = 1, #peripheral.getNames() do
		if peripheral.getType(peripheral.getNames()[i]) == name then
			return peripheral.getNames()[i]
		end
	end
end

local d = true

function dbug (s)

	if d then print(s) end
	
end

function broadcast (msg, protocol)

	local modem = getPeripheral("modem")
	
	rednet.open(modem)
	rednet.broadcast(msg, protocol)
	rednet.close(modem)
	
end

function send (id, msg, protocol)

	local modem = getPeripheral("modem")
	
	rednet.open(modem)
	rednet.send(tonumber(id), {msg = msg}, tostring(protocol))
	rednet.close(modem)

end

function receive (...)

	local modem = getPeripheral("modem")
	local id = 0
	local msg = {}
	local p = ""
	local attempts = 0
	
	local protocol = tostring(select(1,...))
	local cid = tonumber(select(2,...))
	
	if protocol == nil then protocol = "" end
	if cid == nil then cid = 0 end
	
	repeat
		rednet.open(modem)
		id, msg, p = rednet.receive(tonumber(timeout))
		rednet.close(modem)
	
		attempts = attempts + 1
		
		if p == "dns" then
			rednet.open(modem)
			rednet.send(tonumber(id), tostring(os.getComputerID()), tostring(p))
			rednet.close(modem)
		end
		
		
	until ((protocol == "" or p == protocol) and (cid == 0 or tonumber(cid) == tonumber(id))) or attempts > timeOutAttempts 
	
	return id, msg
end

local function getNuclearControlIDs ()

	local modem = getPeripheral("modem")
	
	rednet.open(modem)
	local ids = {rednet.lookup(nuclearControlProt)}
	rednet.close(modem)
	
	return ids
	
end

--Updates nuclearControlSystems table with current data
--id: int
--optional send number id to update a single nuclear control system
local function updateNuclearControlSystemsStats (...)

	local rid = 0
	local rMsg = {}
	local ids = getNuclearControlIDs()
	
	if #ids > 0 then
		nuclearControlSystems = {}
	else
		return
	end
	
	for i = 1, #ids do
		
		send(ids[i], "getStats", nuclearControlProt)
		rid, rMsg = receive(nuclearControlProt, ids[i])	
		nuclearControlSystems[tonumber(rid)] = rMsg.msg

	end
	
end

local function drawLine (id, k)

	id = tonumber(id)
	local x = (k%2) * 35 + 1
	local y = 4 + math.floor((k - 1)/2)
	local nPos = 0
	local sPos = 8
	local euPos = 17
	local tPos = 24
	
	if id == nil then return end
	if nuclearControlSystems[id] == nil then return end
	
	local temp = math.floor(tonumber(nuclearControlSystems[id].getHeat)/tonumber(nuclearControlSystems[id].getMaxHeat))
	local mode = ""
	
	monitor.setCursorPos(x+nPos,y)
	monitor.write("ID #"..id)
	monitor.setCursorPos(x+sPos,y)
	
	if nuclearControlSystems[id].currentMode == "energy" then
		mode = "ENERGY"
		monitor.setTextColour(8192)
	elseif nuclearControlSystems[id].currentMode == "cooldown" then
		mode = "COOLDOWN"
		monitor.setTextColour(2048)
	else
		mode = "SHUTDOWN"
		monitor.setTextColour(16384)
	end
	
	monitor.write(mode)
	monitor.setTextColour(1)
	
	monitor.setCursorPos(x+euPos,y)
	monitor.write("EU: "..nuclearControlSystems[id].getEUOutput)
	monitor.setCursorPos(x+tPos,y)
	monitor.write("Temp: "..temp.."%")
		
end
--Draws the monitor
--page: int
--current page the monitor is on
local function drawMonitor(page)
	
	local n = 0
	local x = 1
	local y = 1
	local title = "Nuclear Command"
	local w,h = monitor.getSize()
	local totalEU = 0
	local ids = {}
	
	dbug("Drawing monitor")
	
	for key, value in pairs(nuclearControlSystems) do
		dbug("Found id: "..tostring(key))
		if filter == nuclearControlSystems[key].currentMode or filter == "all" then
			ids[#ids+1] = tonumber(key) 
		end
	end
	
	if page*pageSize + pageSize < #ids then
		n = page*pageSize + pageSize
	else
		n = #ids
	end
	
	monitor.clear()
	monitor.setTextColour(1)
	monitor.setTextScale(1)
	x = math.floor(math.floor(w - string.len(title))/2)
	monitor.setCursorPos(x,y)
	monitor.write(title)
	y = 3
	x = math.floor(math.floor(w - string.len(filterMsg))/2)
	monitor.setCursorPos(x,y)
	monitor.write(filterMsg)
	
	for i = page*pageSize + 1, n do
		
		local id = ids[i]
		
		drawLine(id, i - page*pageSize)
		
	end
	
	for key, value in pairs(nuclearControlSystems) do
	
		totalEU = totalEU + nuclearControlSystems[key].getEUOutput
		
	end
	
	local euString = "Total EU being produced: "..totalEU
	monitor.setTextColour(1)
	monitor.setTextScale(1)
	x = math.floor(math.floor(w - string.len(euString))/2)
	y = 2
	monitor.setCursorPos(x,y)
	monitor.write(euString)
	monitor.setCursorPos(1,1)
	
end

--handles all nuclear system events
--id: int
--a nuclear system id
--msg: table
--table containing nuclear system information
--returns: string
--return message
local function handleNuclearSystemEvent (id, msg)

	dbug("Handling nuclear systems event from id: "..tostring(id).." msg: "..tostring(msg))
	
	nuclearControlSystems[tonumber(id)] = msg.msg
end

--Sends a command to one or all nuclear control systems
--id: int
--if id is 0 cmd will be broadcast to all nuclear control systems
--cmd: string
--command to send to nuclear control systems
--return: string
--msg received from nuclear control system
local function executeCommand (id, cmd)

	local received = false
	local rid = 0
	local rMsg = ""
	
	--It's poor design, but a very specific action needs to be taken if the cmd is disconnect
	if id > 0 then
		
		send(id, cmd, nuclearControlProt)
		rid, rMsg = receive(nuclearControlProt, id)
		
		if cmd == "disconnect" and rMsg.msg.success ~= nil then
			nuclearControlSystems[tonumber(rid)] = nil
		end
		
	else
	
		if cmd == "disconnect" then
			for key, value in pairs(nuclearControlSystems) do

				send(key, cmd, nuclearControlProt)
				rid, rMsg = receive(nuclearControlProt, key)

				if rMsg.msg.success ~= nil then
					nuclearControlSystems[key] = nil
				end
			end

		else
			for key, value in pairs(nuclearControlSystems) do
				
				send(key, cmd, nuclearControlProt)
				
			end
		end
		
	end
	
	return rMsg
end

--Handles normal system events
local function handleSystemEvent ()
	
	local msg = updateNuclearControlSystemsStats()
	
	drawMonitor(currentPage)
	
	return msg
end

--Handles any rednet events not from nuclear control systems
--id: int
--senders computer id
--msg: string
--senders msg
--returns: string
--return message
local function handleRednetMessageEvent (id, msg, protocol)

	local rMsg = ""
	local modem = getPeripheral("modem")
	
	dbug("id: "..tostring(id).." msg: "..tostring(msg.msg).." protocol: "..tostring(protocol))
	
	if protocol == "dns" then
		rednet.open(modem)
		rednet.send(tonumber(id), tostring(os.getComputerID()), tostring(protocol))
		rednet.close(modem)
	end
		
	return rMsg
end

--initialize program
local function init ()
	
	local event = ""
	local id = 0
	local msg = ""
	local modem = getPeripheral("modem")
	
	print("Initializing system...")
	--Clear Monitor and start initialize timer
	monitor.clear()
	
	rednet.open(modem)
	rednet.host(tostring(nuclearCommandHost), tostring(nuclearCommandHost))
	rednet.close(modem)
	
	print("Initialization Complete!")

end

--Handles any command events
--cmd: string
--String with the format of <cmd> <arg1> <arg2> <arg3> ...
--return: string
--a string return message (mostly for exiting program)
local function handleCommandEvent (cmd)
	
	--table with element 1 being the command and every element after an arg
	local c = {}
	local id = 0
	--return message
	local rMsg = ""

	--put individual words from the command into c
	for word, w in string.gmatch(cmd, "[%a%d]+") do 
		c[#c+1] = word
	end

	--handle each command
	
	dbug("Handling command: "..tostring(cmd))
	--quits program
	if c[1] == "quit" then
		rMsg = c[1]
	elseif c[1] == "stop" then
			
		if #c > 1 then
			rMsg = executeCommand(tonumber(c[2]),c[1])
		else
			rMsg = executeCommand(0,c[1])
		end
		
	elseif c[1] == "start" then
	
		if #c > 1 then
			rMsg = executeCommand(tonumber(c[2]),c[1])
		else
			rMsg = executeCommand(0,c[1])
		end
		
	elseif c[1] == "shutdown" then
	
		if #c > 1 then
			rMsg = executeCommand(tonumber(c[2]),c[1])
		else
			rMsg = executeCommand(0,c[1])
		end
		
	elseif c[1] == "turnon" then
	
		if #c > 1 then
			rMsg = executeCommand(tonumber(c[2]),c[1])
		else
			rMsg = executeCommand(0,c[1])
		end
		
	elseif c[1] == "disconnect" then
		
		if #c > 1 then
			rMsg = executeCommand(tonumber(c[2]),c[1])
		else
			rMsg = executeCommand(0,c[1])
		end
	elseif c[1] == "help" then
		print("Commands: stop [id?], shutdown [id?], start [id?], disconnect [id?], update, show [all, energy, cooldown, shutdown], quit")
	elseif c[1] == "update" then
		rMsg = updateNuclearControlSystemsStats()
	elseif c[1] == "show" then
		if c[2] == nil then
			filter = "all"
			filterMsg = "Showing all system entries"
		elseif c[2] == "energy" then
			filter = "energy"
			filterMsg = "Showing systems in ENERGY mode"
		elseif c[2] == "cooldown" then
			filter = "cooldown"
			filterMsg = "Showing systems in COOLDOWN mode"
		elseif c[2] == "shutdown" then
			filter = "shutdown"
			filterMsg = "Showing systems in SHUTDOWN mode"	
		end
		
	end
	
	updateNuclearControlSystemsStats()
	drawMonitor(currentPage)
	
	return rMsg
end

local function handleMonitorTouchEvent ()

	local rMsg = ""
	local maxPage = math.ceil(#nuclearControlSystems / pageSize)
	
	currentPage = currentPage + 1
	
	if maxPage < currentPage then
		currentPage = 0
	end
	
	drawMonitor(currentPage)
	
	return rMsg
end

--waits for events and performs actions based on them 
-- t: int
-- time between performing system events
local function eventHandler ()

	local modem = getPeripheral("modem")
	local event = ""
	local id = 0
	local msg = ""
	local tid = os.startTimer(cycle)
	local protocol = ""
	
	--get any event
	rednet.open(modem)
	event, id, msg, protocol = os.pullEvent()
	rednet.close(modem)

	
	--handle events
	if protocol == nuclearControlProt then
		dbug("Event: "..tostring(event).." Handling id: "..tostring(id).." Protocol: "..tostring(protocol))
		msg = handleNuclearSystemEvent(id, msg)
	elseif event == "rednet_message" then
		dbug("Event: "..tostring(event).." Handling id: "..tostring(id))
		msg = handleRednetMessageEvent(id, msg, protocol)
	elseif event == "key" then
		dbug("Event: "..tostring(event).." Handling id: "..tostring(id))
		msg = handleCommandEvent(read())
	elseif event == "timer" and id == tid then
		dbug("Event: "..tostring(event).." Handling id: "..tostring(id))
		msg = handleSystemEvent()
	elseif event == "monitor_touch" then
		dbug("Event: "..tostring(event).." Handling id: "..tostring(id))
		msg = handleMonitorTouchEvent()
	end
	
	os.cancelTimer(tid)
	
	return msg
end 

--Handles everything before a shutdown occurs
local function shutdown ()

	local modem = getPeripheral("modem")
	
	executeCommand(0, "shutdown")
	rednet.open(modem)
	rednet.unhost(nuclearCommandHost, nuclearCommandHost)
	rednet.close(modem)
	monitor.clear()
	
end

--main function for program
local function main ()
	
	--initialize program
	init()
	print("Welcome to Nuclear Command!")
	
	--loop in eventHandler
	while true do
		
		local msg = eventHandler()

		if type(msg) == "string" then
		
			if msg == "quit" then
				break
			end
		
		end
		
	end
	
	--shutdown program
	shutdown()
	
end

--Run main program
main()