local args = {...}

function getPeripheral (name)
	for i = 1, #peripheral.getNames() do
		if peripheral.getType(peripheral.getNames()[i]) == name then
			return peripheral.getNames()[i]
		end
	end
end

local d = true

function dbug (s)

	if d then print(s) end
	
end

function send (id, msg, protocol,...)

	local modem = getPeripheral("modem")
	
	local frequency = 0
	
	if select(1,...) ~= nil then frequency = select(1,...) end

	rednet.open(modem)
	rednet.send(tonumber(id), {frequency = tonumber(frequency), msg = msg}, tostring(protocol))
	rednet.close(modem)

end

function receive (protocol)

	local modem = getPeripheral("modem")
	local id = 0
	local msg = {}
	local p = ""
	
	rednet.open(modem)
	id, msg, p = rednet.receive(protocol)
	rednet.close(modem)
	
	return id, msg
end

local chest = peripheral.wrap(getPeripheral("ender_chest"))
local modem = getPeripheral("modem")
local turtleGetItemProt = "turtleGetItem"
local getItemId = nil

function getItem (itemName, slot, amount)
	
	if getItemId == nil then return end
	
	local id = tonumber(getItemId)
	local cmd = "getItem"
	local request = {cmd = cmd, itemName = tostring(itemName), amount = tonumber(amount)}
	
	dbug("Requesting item from id: "..tostring(id).." cmd: "..tostring(cmd).." itemName: "..tostring(itemName).." amount: "..tostring(amount))
	send(id, request, turtleGetItemProt)
	
	repeat
		id, msg = receive(turtleGetItemProt)
	until msg.msg.success
	
	dbug("Received "..tostring(amount).." "..tostring(itemName))
	
	turtle.select(tonumber(slot))
	turtle.suckDown(tonumber(amount))
	
end

function refuel ()

	while turtle.getFuelLevel() < 5000 do
		dbug("Refueling, currnet fuel levels: "..tostring(turtle.getFuelLevel()))
		turtle.select(1)
		getItem("Lava Bucket", 1, 1)
		turtle.refuel()
		turtle.drop()
	end
				
end

function forwardAndPlaceDown(slot)

	turtle.forward()
	if slot ~= 0 then
		turtle.select(slot)
		turtle.placeDown()
	end
	
end

function buildNormalSection (y)

	refuel()
	
	getItem("Block of Iron", 1, 42)
	getItem("Clear Glass", 2, 36)
	getItem("Warp Itemduct (Opaque)", 3, 14)
	getItem("Cryo-Stabilized Fluxduct", 4, 5)
	getItem("Networking Cable", 5, 4)
	getItem("Reactor Chamber", 6, 6)
	getItem("Nuclear Reactor", 7, 1)
	getItem("Resonant Energy Cell", 8, 1)
	getItem("RF Producer", 9, 1)
	getItem("Energy Bridge", 10, 1)
	getItem("IC2 EV Consumer", 11, 1)
	getItem("Red Lamp", 12, 1)
	getItem("Blue Lamp", 13, 1)
	getItem("Green Lamp", 14, 1)
	
	for i = 1, (y - 1)*4 do
		turtle.up()
	end
	
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(2)
	forwardAndPlaceDown(2)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(3)
	
	turtle.turnRight()
	forwardAndPlaceDown(5)
	turtle.turnRight()
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(2)
	
	turtle.turnLeft()
	forwardAndPlaceDown(2)
	turtle.turnLeft()
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(1)
	
	turtle.turnRight()
	forwardAndPlaceDown(8)
	turtle.turnRight()
	forwardAndPlaceDown(9)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(2)
	
	turtle.turnLeft()
	forwardAndPlaceDown(2)
	turtle.turnLeft()
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(11)
	forwardAndPlaceDown(10)
	forwardAndPlaceDown(4)
	
	turtle.turnRight()
	forwardAndPlaceDown(4)
	turtle.turnRight()
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(2)
	
	turtle.turnLeft()
	forwardAndPlaceDown(1)
	turtle.turnLeft()
	forwardAndPlaceDown(2)
	forwardAndPlaceDown(2)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(3)
	
	for i = 1, 6 do
		turtle.back()
	end
	
	turtle.turnLeft()
	
	for i = 1, 6 do
		turtle.forward()
	end
	
	turtle.turnRight()
	turtle.up()
	
	
	
	
	
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(2)
	forwardAndPlaceDown(2)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(3)
	forwardAndPlaceDown(3)
	
	turtle.turnRight()
	forwardAndPlaceDown(5)
	turtle.turnRight()
	forwardAndPlaceDown(3)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(2)
	
	turtle.turnLeft()
	forwardAndPlaceDown(2)
	turtle.turnLeft()
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(3)
	forwardAndPlaceDown(12)
	
	turtle.turnRight()
	forwardAndPlaceDown(0)
	turtle.turnRight()
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(7)
	--NUCLEAR REACTOR BUILD--
	turtle.select(6)
	turtle.back()
	turtle.placeDown()
	turtle.forward()
	turtle.turnLeft()
	turtle.forward()
	turtle.placeDown()
	turtle.back()
	turtle.back()
	turtle.down()
	turtle.down()
	turtle.place()
	turtle.up()
	turtle.up()
	turtle.placeDown()
	turtle.forward()
	turtle.turnRight()
	turtle.forward()
	turtle.placeDown()
	--END NUCLEAR REACTOR BUILD--
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(2)
	
	turtle.turnLeft()
	forwardAndPlaceDown(2)
	turtle.turnLeft()
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(3)
	forwardAndPlaceDown(13)
	
	turtle.turnRight()
	forwardAndPlaceDown(4)
	turtle.turnRight()
	forwardAndPlaceDown(3)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(2)
	
	turtle.turnLeft()
	forwardAndPlaceDown(1)
	turtle.turnLeft()
	forwardAndPlaceDown(2)
	forwardAndPlaceDown(2)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(3)
	forwardAndPlaceDown(3)
	
	for i = 1, 6 do
		turtle.back()
	end
	
	turtle.turnLeft()
	
	for i = 1, 6 do
		turtle.forward()
	end
	
	turtle.turnRight()
	turtle.up()
	
	
	
	
	
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(2)
	forwardAndPlaceDown(2)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(3)
	
	turtle.turnRight()
	forwardAndPlaceDown(5)
	turtle.turnRight()
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(2)
	
	turtle.turnLeft()
	forwardAndPlaceDown(2)
	turtle.turnLeft()
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(1)
	
	turtle.turnRight()
	forwardAndPlaceDown(14)
	turtle.turnRight()
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(6)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(2)
	
	turtle.turnLeft()
	forwardAndPlaceDown(2)
	turtle.turnLeft()
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(1)
	
	turtle.turnRight()
	forwardAndPlaceDown(4)
	turtle.turnRight()
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(2)
	
	turtle.turnLeft()
	forwardAndPlaceDown(1)
	turtle.turnLeft()
	forwardAndPlaceDown(2)
	forwardAndPlaceDown(2)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(3)
	
	for i = 1, 6 do
		turtle.back()
	end
	
	turtle.turnLeft()
	
	for i = 1, 6 do
		turtle.forward()
	end
	
	turtle.turnRight()
	turtle.up()
	
	
	
	
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(2)
	forwardAndPlaceDown(2)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(3)
	
	turtle.turnRight()
	forwardAndPlaceDown(5)
	turtle.turnRight()
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(2)
	
	turtle.turnLeft()
	forwardAndPlaceDown(2)
	turtle.turnLeft()
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(1)
	
	turtle.turnRight()
	forwardAndPlaceDown(1)
	turtle.turnRight()
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(2)
	
	turtle.turnLeft()
	forwardAndPlaceDown(2)
	turtle.turnLeft()
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(1)
	
	turtle.turnRight()
	forwardAndPlaceDown(4)
	turtle.turnRight()
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(0)
	forwardAndPlaceDown(2)
	
	turtle.turnLeft()
	forwardAndPlaceDown(1)
	turtle.turnLeft()
	forwardAndPlaceDown(2)
	forwardAndPlaceDown(2)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(1)
	forwardAndPlaceDown(3)
	
	for i = 1, 6 do
		turtle.back()
	end
	
	turtle.turnLeft()
	
	for i = 1, 6 do
		turtle.forward()
	end
	
	turtle.turnRight()
	
	for i  = 1, (y - 1)*4 do
		turtle.down()
	end
	
	turtle.down()
	turtle.down()
	turtle.down()
end

function buildSkeletonSection (i)

end

function main ()

	local command_id = nil
	local frequency = 0
	local id = 0
	local msg = {}
	local open = {cmd = "openFrequency"}
	local close = {cmd = "closeFrequency"}
	
	
	if #args < 1 then return end
	
	local nSection = tonumber(args[1])
	local sSection = 0
	
	if #args >= 2 then sSection = args[2] end
	
	while command_id == nil do
		rednet.open(modem)
		command_id = rednet.lookup(tostring(turtleGetItemProt), tostring(turtleGetItemProt))
		rednet.close(modem)
	end
	
	dbug("Sending to id: "..tostring(command_id).." msg: "..tostring(open.cmd).." protocol: "..tostring(turtlegetItemProt))
	
	send(command_id, open, turtleGetItemProt)
	
	dbug("Waiting for response")
	
	repeat
		id, msg = receive(turtleGetItemProt)
	until msg.msg.success
	
	dbug("Response received from id: "..tostring(id).." frequency: "..tostring(msg.frequency))
	
	getItemId = tonumber(msg.frequency)
	hostName = tostring(msg.msg.hostName)
	frequency = tonumber(msg.frequency)
	
	chest.setFrequency(frequency)
	
	for i = 1, nSection do
		buildNormalSection(i)
	end
	
	for i = 1, sSection do
		buildSkeletonSection(i)
	end
	
	dbug("Sending to id: "..tostring(command_id).." msg: "..tostring(close.cmd).." protocol: "..tostring(turtlegetItemProt))
	
	send(command_id, close, turtleGetItemProt, frequency)
	
	dbug("Waiting for response")
	
	repeat
		id, msg = receive(turtleGetItemProt)
	until msg.msg.success
	
	dbug("Response received from id: "..tostring(id).." success: "..tostring(msg.msg.success))
	
	chest.setFrequency(0)
	
end

main()