
function getPeripheral (name)
	for i = 1, #peripheral.getNames() do
		if peripheral.getType(peripheral.getNames()[i]) == name then
			return peripheral.getNames()[i]
		end
	end
end

function dns ()

	rednet.open(getPeripheral("modem"))
	local id, msg, p = rednet.receive()
	rednet.send(tonumber(id), tostring(os.getComputerID()), tostring(p))
	rednet.open(getPeripheral("modem"))
	
end

local d = true

function dbug (s)

	if d then print(s) end
	
end

function getUniqueHostName ()

	local i = 1
	
	repeat
		local h = 1
		hostName = "host"..tostring(i)
		i = i+1
		
		rednet.open(getPeripheral("modem"))
		h = rednet.lookup(tostring(hostName))
		rednet.close(getPeripheral("modem"))
		
	until h == nil

	return tostring(hostName)
end

function startHost ()

	local hostName = getUniqueHostName()
	
	rednet.open(getPeripheral("modem"))
	rednet.host(hostName, hostName)
	rednet.close(getPeripheral("modem"))
	
	return tostring(hostName)
end

function endHost (hostName)
	rednet.open(getPeripheral("modem"))
	rednet.unhost(hostName,hostName)
	rednet.close(getPeripheral("modem"))
end

function send (id, msg, protocol,...)

	local modem = getPeripheral("modem")
	local lookup = nil
	local sProt = nil
	local rProt = nil
	
	if select(1,...) ~= nil then lookup = select(1,...) end
	if select(2,...) ~= nil then sProt = select(2,...) end
	if select(3,...) ~= nil then rProt = select(3,...) end
	
	rednet.open(modem)
	if lookup ~= nil then id = tonumber(rednet.lookup(lookup, lookup)) end
	local rid = tonumber(os.getComputerID())
	
	dbug("id: "..tostring(tonumber(id)).." protocol: "..tostring(protocol))
	
	rednet.send(tonumber(id), {id = tonumber(rid), sProt = tostring(sProt), rProt = tostring(rProt), msg = msg}, tostring(protocol))
	rednet.close(modem)

end

function receive (protocol)

	local modem = getPeripheral("modem")
	local id = 0
	local msg = {}
	local p = ""
	
	repeat
		rednet.open(modem)
		id, msg, p = rednet.receive()
		rednet.close(modem)
		
		if p == "dns" then
			rednet.open(modem)
			rednet.send(tonumber(id), tostring(os.getComputerID()), tostring(p))
			rednet.close(modem)		
		end
		
	until p == protocol
	
	return msg
end

local chest = peripheral.wrap(getPeripheral("ender_chest"))
local getItemId = 0
local homeFrequency = 1
local beginFrequency = 2
local getItemProt = "getItem"
local checkChestProt = "checkChest"
local frequencies = {tonumber(os.getComputerID())}
local busy = false

function init ()
		
	print("Initializing")
	
	rednet.open(getPeripheral("modem"))
	rednet.host(checkChestProt, checkChestProt)
	rednet.close(getPeripheral("modem"))
	
	print("Initialization complete")
end

function shutdown ()

	rednet.open(getPeripheral("modem"))
	rednet.unhost(checkChestProt, checkChestProt)
	rednet.close(getPeripheral("modem"))
	
end

function getFrequency (id)
	
	dbug("getFrequency id: "..tostring(id))
	
	local f = 0
	
	for i = beginFrequency, #frequencies do
		if frequencies[i] == nil then
			frequencies[i] = id
			f = i
			break
		end
	end
	
	if f == 0 then
		frequencies[#frequencies+1] = id
		f = #frequencies
	end
	
	dbug("Sending to 0 frequency: "..tostring(f).." prot: "..checkChestProt.." lookup: "..getItemProt)
	
	send(0, {frequency = f}, checkChestProt, getItemProt)
	
end

function releaseFrequency (id)

	dbug("releaseFrequency id: "..tostring(id))
	
	local bool = false
	
	for i = beginFrequency, #frequencies do
		if frequencies[i] == id then
			frequencies[i] = nil
			bool = true
			break
		end
	end
	
	dbug("Sending to 0 success: "..tostring(bool).." prot: "..checkChestProt.." lookup: "..getItemProt)
	send(0, {success = bool}, checkChestProt, getItemProt)
	
end

function openFrequency (id)
	
	dbug("openFrequency id: "..tostring(id))
	
	if busy then
		dbug("Sending to 0 success: false prot: "..checkChestProt.." lookup: "..getItemProt)
		send(0, {success = false}, checkChestProt, getItemProt)
	else
		print(frequencies[2])
		
		for i = beginFrequency, #frequencies do
			if frequencies[i] == id then
				chest.setFrequency(i)
				
				busy = true
				
				--Send true reply if frequency opened succesfully
				dbug("Sending to 0 success: true prot: "..checkChestProt.." lookup: "..getItemProt)
				send(0, {success = true}, checkChestProt, getItemProt)
				
				return
		
			end
		end
		
		--Reply with false signal if no frequency opened
		dbug("Sending to 0 success: false prot: "..checkChestProt.." lookup: "..getItemProt)
		send(0, {success = false}, checkChestProt, getItemProt)
	end
end

function closeFrequency (id)

	dbug("closeFrequency id: "..tostring(id))
	
	for i = beginFrequency, #frequencies do
		if frequencies[i] == id then
			chest.setFrequency(homeFrequency)
			busy = false
			
			--Send true reply if frequency closed succesfully
			dbug("Sending to 0 success: true prot: "..checkChestProt.." lookup: "..getItemProt)
			send(0, {success = true}, checkChestProt, getItemProt)
			
			return
		end
	end
	
	--Reply with false signal if no frequency closed
	dbug("Sending to 0 success: false prot: "..checkChestProt.." lookup: "..getItemProt)
	send(0, {success = false}, checkChestProt, getItemProt)

end

function main ()

	init()
	
	while true do

		local id = 0
		local msg = ""
		local protocol = ""
		local f = 0
		
		msg = receive(getItemProt)

		dbug("Received msg: "..tostring(msg))
		
		if msg.msg.cmd == "getFrequency" then
			getFrequency(msg.msg.id)
		elseif msg.msg.cmd == "releaseFrequency" then
			releaseFrequency(msg.msg.id)
		elseif msg.msg.cmd == "openFrequency" then
			openFrequency(msg.msg.id)
		elseif msg.msg.cmd == "closeFrequency" then
			closeFrequency(msg.msg.id)
		end

	end

	shutdown()
end

parallel.waitForAny(main(),main(),main(),main())