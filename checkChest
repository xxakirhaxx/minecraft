
function getPeripheral (name)
	for i = 1, #peripheral.getNames() do
		if peripheral.getType(peripheral.getNames()[i]) == name then
			return peripheral.getNames()[i]
		end
	end
end

local chest = peripheral.wrap(getPeripheral("ender_chest"))
local modem = getPeripheral("modem")
local getItemId = 0
local homeFrequency = 1
local beginFrequency = 2
local getItemProt = "getItem"
local checkChestProt = "checkChest"
local frequencies = {tonumber(os.getComputerID())}
local busy = false

function send (id, msg, protocol,...)

	local lookup = nil
	local sProt = nil
	
	if select(1,...) ~= nil then lookup = select(1,...) end
	if select(2,...) ~= nil then sProt = select(2,...) end
	
	rednet.open(modem)
	if lookup ~= nil then id = tonumber(rednet.lookup(lookup, lookup)) end
	local rid = tonumber(os.getComputerID())
	
	rednet.send(id, {id = tonumber(rid), sProt = sProt,  msg = msg}, protocol)
	rednet.close(modem)

end

function receive (protocol)

	local id = 0
	local msg = {}
	local p = ""
	
	repeat
		rednet.open(modem)
		id, msg, p = rednet.receive()
		rednet.close()
		
		if p == "dns" then
			rednet.open(wireless)
			rednet.send(id, tostring(os.getComputerID()), p)
			rednet.close(wireless)		
		end
		
	until p == protocol
	
	return msg
end

function init ()
		
	print("Initializing")
	
	rednet.open(modem)
	rednet.host(checkChestProt, checkChestProt)
	rednet.close(modem)
	
	print("Initialization complete")
end

function shutdown ()

	rednet.open(modem)
	rednet.unhost(checkChestProt, checkChestProt)
	rednet.close(modem)
	
end

function getFrequency (id)
	
	local f = 0
	
	for i = beginFrequency, #frequencies do
		if frequencies[i] == nil then
			frequencies[i] = id
			f = i
			break
		end
	end
	
	if f == 0 then
		frequencies[#frequencies+1] = id
		f = #frequencies
	end
	
	send(0, {frequency = f}, checkChestProt, getItemProt)
	
end

function releaseFrequency (id)

	local bool = false
	
	for i = beginFrequency, #frequencies do
		if frequencies[i] == id then
			frequencies[i] = nil
			bool = true
			break
		end
	end
	
	send(0, {success = bool}, checkChestProt, getItemProt)
	
end

function openFrequency (id)
	
	if busy then
		send(0, {success = false}, checkChestProt, getItemProt)
	else
		print(frequencies[2])
		
		for i = beginFrequency, #frequencies do
			if frequencies[i] == id then
				chest.setFrequency(i)
				
				busy = true
				
				--Send true reply if frequency opened succesfully
				send(0, {success = true}, checkChestProt, getItemProt)
				
				return
		
			end
		end
		
		--Reply with false signal if no frequency opened
		send(0, {success = false}, checkChestProt, getItemProt)
	end
end

function closeFrequency (id)

	for i = beginFrequency, #frequencies do
		if frequencies[i] == id then
			chest.setFrequency(homeFrequency)
			busy = false
			
			--Send true reply if frequency closed succesfully
			send(0, {success = true}, checkChestProt, getItemProt)
			
		end
	end
	
	--Reply with false signal if no frequency closed
	send(0, {success = false}, checkChestProt, getItemProt)

end

function main ()

	init()
	
	while true do

		local id = 0
		local msg = ""
		local protocol = ""
		local f = 0
		
		msg = rednet.receive()

		
		if msg.msg.cmd == "getFrequency" then
			getFrequency(msg.msg.id)
		elseif msg.msg.cmd == "releaseFrequency" then
			releaseFrequency(msg.msg.id)
		elseif msg.msg.cmd == "openFrequency" then
			openFrequency(msg.msg.id)
		elseif msg.msg.cmd == "closeFrequency" then
			closeFrequency(msg.msg.id)
		end

	end

	shutdown()
end

main()