local reactor = peripheral.wrap("back")
local energyCell = peripheral.wrap("bottom")
local cycle = 5
local currentMode = "energy"
local nuclearControlId = 0
local modemSide = "front"

function sendReactorInfo ()

	local id = 0
	local msg = ""
	local reactorInfo = {getHeat = reactor.getHeat(), getMaxHeat = reactor.getMaxHeat(), getEUOutput = reactor.getEUOutput(), currentMode = currentMode}
	
	rednet.open(modemSide)
	rednet.send(tonumber(nuclearControlId), reactorInfo)
	rednet.close(modemSide)
	
end

function getNuclearControlId ()
	local event = ""
	local id = 0
	local msg = ""
	
	while msg ~= "nuclearControl" do
	
		rednet.open(modemSide)
		id, msg = rednet.receive()
		rednet.close(modemSide)
		
		print(nuclearControlId, " : ", id, " : ", msg)
		if msg == "turnon" and id == nuclearControlId then
			
			rednet.open(modemSide)
			rednet.send(id, "received")
			rednet.close(modemSide)
			
			return id
		elseif msg == "getStats" and id == nuclearControlId then
			sendReactorInfo()
		elseif id == nuclearControlId then
		
			rednet.open(modemSide)
			rednet.send(id, "received")
			rednet.close(modemSide)
			
		end
		
	end
	
	rednet.open(modemSide)
	rednet.send(id, "nuclearCommand")
	rednet.close(modemSide)
	
	while msg ~= "start" do
		rednet.open(modemSide)
		id, msg = rednet.receive()
		rednet.close(modemSide)
	end
	
	return id
end

nuclearControlId = getNuclearControlId()

function coolDownMode ()
	redstone.setOutput("back", false)
	redstone.setOutput("right", false)
	redstone.setOutput("top", false)
	redstone.setOutput("left", true)
	return "COOLDOWN"
end

function energyMode ()
	redstone.setOutput("back", true)
	redstone.setOutput("right", false)
	redstone.setOutput("top", true)
	redstone.setOutput("left", false)
	return "ENERGY"
end

function shutDownMode ()
	redstone.setOutput("back", false)
	redstone.setOutput("right", true)
	redstone.setOutput("top", false)
	redstone.setOutput("left", false)
	return "SHUTDOWN"
end

function display (mode)
	term.clear()
	print("Current Temperature: ", reactor.getHeat())
	print("Max Temperature: ", reactor.getMaxHeat())
	print("Shutdown Temperature: ", reactor.getMaxHeat() / 5)
	print("System State: ", mode)
	
end

function setCurrentMode (m)
	
	if m ~= "" then
		currentMode = m
	end
	
	if currentMode == "energy" then
		display(energyMode())
	elseif currentMode == "cooldown" then
		display(coolDownMode())
	elseif currentMode == "shutdown" then
		display(shutDownMode())
	end
	
end

function command (id, cmd)

	local m = currentMode
	
	if cmd == "shutdown" then
		
		rednet.open(modemSide)
		rednet.send(id, "received")
		rednet.close(modemSide)
		
		setCurrentMode("shutdown")
		getNuclearControlId()
		setCurrentMode(m)
		
	elseif cmd == "stop" then
	
		rednet.open(modemSide)
		rednet.send(id, "received")
		rednet.close(modemSide)
		
		msg = ""
		setCurrentMode("cooldown")
		
		while msg ~= "start" do 
			msg = wait(cycle) 
		end
		
		rednet.open(modemSide)
		rednet.send(id, "received")
		rednet.close(modemSide)
		
		setCurrentMode(m)
	elseif cmd == "disconnect" then
	
		rednet.open(modemSide)
		rednet.send(id, "received")
		rednet.close(modemSide)
		
		setCurrentMode("shutdown")
		os.reboot()
	elseif cmd == "getStats" then
		sendReactorInfo()
	end	
	
	return cmd
end

function wait (num)
	local event = ""
	local id = 0
	local msg = ""
	local tid  = 0
	
	if num > 0 then
		tid = os.startTimer(num)
	end

	while true do
		rednet.open(modemSide)
		event, id, msg  = os.pullEvent()
		rednet.close(modemSide)
		
		if event == "timer" or event == "rednet_message" then
			break
		end
	end
		
	setCurrentMode("")
	
	if event == "rednet_message" and id == nuclearControlId then
		msg = command(id, msg)	
	end
	
	os.cancelTimer(tid)
	
	return msg
end


while true do
	local temp = reactor.getHeat()
	local maxTemp = reactor.getMaxHeat()
	local shutDownTemp = maxTemp / 5
	local invSize = reactor.getInventorySize()
	
	setCurrentMode("energy")
	
	-- Lock into cool down mode if  temp is to high until temp is 0
	if temp > shutDownTemp then
		while reactor.getHeat() > 1 do
			setCurrentMode("cooldown")
			wait(cycle)
		end
		setCurrentMode("energy")
	end
	
	for i = 1, invSize do
		local item = reactor.getStackInSlot(i)
		if item ~= nil then
			--Check parts dmg, if any is too high send system into cool down mode
			if item["dmg"]/item["max_dmg"] > .5 and item["name"] ~= "reactorUraniumQuad" then
				while reactor.getStackInSlot(i)["dmg"]/item["max_dmg"] > .05 do
					setCurrentMode("cooldown")
					wait(cycle)
				end
				setCurrentMode("energy")
			end
			
			--Check fuel rod dmg, if dmg is too high shut down 
			if item["dmg"]/item["max_dmg"] > .95 and item["name"] == "reactorUraniumQuad" then
				while item["dmg"]/item["max_dmg"] > .95 do
					setCurrentMode("shutdown")
					wait(cycle)
				end
				setCurrentMode("energy")
			end
		end
	end
	
	if energyCell.getEnergyStored()/energyCell.getMaxEnergyStored() >= 1 then
		while energyCell.getEnergyStored()/energyCell.getMaxEnergyStored() >= 1 do
			setCurrentMode("cooldown")
			wait(cycle)
		end
		setCurrentMode("energy")
	end
	wait(cycle)
end