local reactor = peripheral.wrap("back")
local energyCell = peripheral.wrap("bottom")
local cycle = 5
local currentMode = "energy"
local nuclearControlId = 0
local modemSide = "front"
local nuclearControlProt = "nuclearControl"
local commandOverride = false
local nuclearCommandHost = "nuclearCommand"

function getPeripheral (name)
	for i = 1, #peripheral.getNames() do
		if peripheral.getType(peripheral.getNames()[i]) == name then
			return peripheral.getNames()[i]
		end
	end
end

local d = true

function dbug (s)

	if d then print(s) end
	
end

function broadcast (msg, protocol)

	local modem = "back"
	
	rednet.open(modem)
	rednet.broadcast(msg)
	rednet.close(modem)
	
end

function send (id, msg, protocol)

	local modem = getPeripheral("modem")
	
	if id == 0 then
		rednet.open(modem)
		id = rednet.lookup(nuclearCommandHost, nuclearCommandHost)
		rednet.close(modem)
	end
	
	rednet.open(modem)
	rednet.send(tonumber(id), {msg = msg}, tostring(protocol))
	rednet.close(modem)

end

function receive (protocol)

	local modem = getPeripheral("modem")
	local id = 0
	local msg = {}
	local p = ""
	local attempts = 0
	
	repeat
		rednet.open(modem)
		id, msg, p = rednet.receive(tonumber(timeout))
		rednet.close(modem)
	
		attempts = attempts + 1
		
		if p == "dns" then
			rednet.open(modem)
			rednet.send(tonumber(id), tostring(os.getComputerID()), tostring(p))
			rednet.close(modem)
		end
	until p == protocol or attempts > timeOutAttempts 
	
	return id, msg
end

function sendReactorInfo ()

	local reactorInfo = {getHeat = reactor.getHeat(), getMaxHeat = reactor.getMaxHeat(), getEUOutput = reactor.getEUOutput(), currentMode = currentMode}
	
	send(0, reactorInfo, nuclearControlProt)
	
end

function coolDownMode ()
	redstone.setOutput("back", false)
	redstone.setOutput("right", false)
	redstone.setOutput("top", false)
	redstone.setOutput("left", true)
	return "COOLDOWN"
end

function energyMode ()
	redstone.setOutput("back", true)
	redstone.setOutput("right", false)
	redstone.setOutput("top", true)
	redstone.setOutput("left", false)
	return "ENERGY"
end

function shutDownMode ()
	redstone.setOutput("back", false)
	redstone.setOutput("right", true)
	redstone.setOutput("top", false)
	redstone.setOutput("left", false)
	return "SHUTDOWN"
end

function display (mode)
	term.clear()
	print("Current Temperature: ", reactor.getHeat())
	print("Max Temperature: ", reactor.getMaxHeat())
	print("Shutdown Temperature: ", reactor.getMaxHeat() / 5)
	print("System State: ", mode)
	
end

function setCurrentMode (m)
	
	if commandOverride == true then
		return
	end
	
	if m ~= "" then
		currentMode = m
	end
	
	if currentMode == "energy" then
		display(energyMode())
	elseif currentMode == "cooldown" then
		display(coolDownMode())
	elseif currentMode == "shutdown" then
		display(shutDownMode())
	end
	
end

function command (id, cmd)
	
	if cmd == "shutdown" then
		
		send(id, {success = true}, nuclearControlProt)
		
		commandOverride = false
		
		setCurrentMode("shutdown")
		
		commandOverride = true
		
	elseif cmd == "stop" then
	
		send(id, {success = true}, nuclearControlProt)

		commandOverride = false
		
		setCurrentMode("cooldown")
 
		commandOverride = true
		
	elseif cmd == "disconnect" then
	
		send(id, {success = true}, nuclearControlProt)
		
		commandOverride = false
		
		setCurrentMode("shutdown")
		
		os.reboot()
		
	elseif cmd == "getStats" then
		sendReactorInfo()
	elseif cmd == "start" or cmd == "turnon" then
		
		send(id, {success = true}, nuclearControlProt)
		
		commandOverride = false
		
	end	
	
	return cmd
end

function wait (num)

	local modem = getPeripheral("modem")
	local event = ""
	local id = 0
	local msg = {}
	local protocol = ""
	local tid  = 0
	
	if num > 0 then
		tid = os.startTimer(num)
	end

	while true do
		rednet.open(modem)
		event, id, msg, protocol = os.pullEvent()
		rednet.close(modem)
		
		if event == "timer" or event == "rednet_message" then
			break
		end
	end
		
	setCurrentMode("")
	
	if event == "rednet_message" and protocol == nuclearControlProt then
		msg = command(id, msg.msg)	
	end
	
	os.cancelTimer(tid)
	
	return msg
end


while true do
	local temp = reactor.getHeat()
	local maxTemp = reactor.getMaxHeat()
	local shutDownTemp = maxTemp / 5
	local invSize = reactor.getInventorySize()
	
	setCurrentMode("energy")
	
	-- Lock into cool down mode if  temp is to high until temp is 0
	if temp > shutDownTemp then
		while reactor.getHeat() > 1 do
			setCurrentMode("cooldown")
			wait(cycle)
		end
		setCurrentMode("energy")
	end
	
	for i = 1, invSize do
		local item = reactor.getStackInSlot(i)
		if item ~= nil then
			--Check parts dmg, if any is too high send system into cool down mode
			if item["dmg"]/item["max_dmg"] > .5 and item["name"] ~= "reactorUraniumQuad" then
				while reactor.getStackInSlot(i)["dmg"]/item["max_dmg"] > .05 do
					setCurrentMode("cooldown")
					wait(cycle)
				end
				setCurrentMode("energy")
			end
			
			--Check fuel rod dmg, if dmg is too high shut down 
			if item["dmg"]/item["max_dmg"] > .95 and item["name"] == "reactorUraniumQuad" then
				while item["dmg"]/item["max_dmg"] > .95 do
					setCurrentMode("shutdown")
					wait(cycle)
				end
				setCurrentMode("energy")
			end
		end
	end
	
	if energyCell.getEnergyStored()/energyCell.getMaxEnergyStored() >= 1 then
		while energyCell.getEnergyStored()/energyCell.getMaxEnergyStored() >= 1 do
			setCurrentMode("cooldown")
			wait(cycle)
		end
		setCurrentMode("energy")
	end
	wait(cycle)
end