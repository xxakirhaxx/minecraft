local reactor = peripheral.wrap("back")
local energyCell = peripheral.wrap("bottom")
local cycle = 5
local currentMode = "energy"
local nuclearControlId = 0
local modemSide = "front"
local nuclearControlProt = "nuclearControl"
local commandOverride = false
local nuclearCommandHost = "nuclearCommand"

function getPeripheral (name)
	for i = 1, #peripheral.getNames() do
		if peripheral.getType(peripheral.getNames()[i]) == name then
			return peripheral.getNames()[i]
		end
	end
end

local d = false

function dbug (s)

	if d then print(s) end
	
end

function broadcast (msg, protocol)

	local modem = "back"
	
	rednet.open(modem)
	rednet.broadcast(msg)
	rednet.close(modem)
	
end

function send (id, msg, protocol)

	local modem = getPeripheral("modem")
	
	if id == 0 then
		rednet.open(modem)
		id = rednet.lookup(nuclearCommandHost, nuclearCommandHost)
		rednet.close(modem)
		
		if id == nil then
			return
		end
		
	end
	
	
	rednet.open(modem)
	rednet.send(tonumber(id), {msg = msg}, tostring(protocol))
	rednet.close(modem)

end

function receive (protocol)

	local modem = getPeripheral("modem")
	local id = 0
	local msg = {}
	local p = ""
	local attempts = 0
	
	repeat
		rednet.open(modem)
		id, msg, p = rednet.receive(tonumber(timeout))
		rednet.close(modem)
	
		attempts = attempts + 1
		
		if p == "dns" then
			rednet.open(modem)
			rednet.send(tonumber(id), tostring(os.getComputerID()), tostring(p))
			rednet.close(modem)
		end
	until p == protocol or attempts > timeOutAttempts 
	
	return id, msg
end

function sendReactorInfo (id)

	local reactorInfo = {getHeat = reactor.getHeat(), getMaxHeat = reactor.getMaxHeat(), getEUOutput = reactor.getEUOutput(), currentMode = currentMode}
	
	send(id, reactorInfo, nuclearControlProt)
	
end

function coolDownMode ()
	redstone.setOutput("back", false)
	redstone.setOutput("right", false)
	redstone.setOutput("top", false)
	redstone.setOutput("left", true)
	return "COOLDOWN"
end

function energyMode ()
	redstone.setOutput("back", true)
	redstone.setOutput("right", false)
	redstone.setOutput("top", true)
	redstone.setOutput("left", false)
	return "ENERGY"
end

function shutDownMode ()
	redstone.setOutput("back", false)
	redstone.setOutput("right", true)
	redstone.setOutput("top", false)
	redstone.setOutput("left", false)
	return "SHUTDOWN"
end

function display (mode)

	if d == false then
		term.clear()
		print("ID: "..tostring(os.getComputerID()))
		print("Current Temperature: ", reactor.getHeat())
		print("Max Temperature: ", reactor.getMaxHeat())
		print("Shutdown Temperature: ", reactor.getMaxHeat() / 5)
		print("System State: ", mode)
	end
	
end

function setCurrentMode (m)
	
	if commandOverride == true then
		return
	end
	
	if m ~= "" then
		currentMode = m
	end
	
	if currentMode == "energy" then
		display(energyMode())
	elseif currentMode == "cooldown" then
		display(coolDownMode())
	elseif currentMode == "shutdown" then
		display(shutDownMode())
	end
	
end

function command (id, cmd)
	
	if cmd == "shutdown" then
		
		send(id, {success = true}, nuclearControlProt)
		
		commandOverride = false
		
		setCurrentMode("shutdown")
		
		commandOverride = true
		
	elseif cmd == "stop" then
	
		send(id, {success = true}, nuclearControlProt)

		commandOverride = false
		
		setCurrentMode("cooldown")
 
		commandOverride = true
		
	elseif cmd == "getStats" then
		sendReactorInfo(id)
	elseif cmd == "start" then
		
		send(id, {success = true}, nuclearControlProt)
		
		commandOverride = false
		
		setCurrentMode("energy")
		
		systemCycle()
		
	end	
	
	return cmd
end

function wait (num)

	local modem = getPeripheral("modem")
	local event = ""
	local id = 0
	local msg = {}
	local protocol = ""
	local tid  = 0
	
	if num > 0 then
		tid = os.startTimer(num)
	end

	while true do
		rednet.open(modem)
		event, id, msg, protocol = os.pullEvent()
		rednet.close(modem)
		
		dbug("Event: "..tostring(event).." id: "..tostring(id).." msg: "..tostring(msg).." protocol: "..tostring(protocol))
		
		if (event == "timer" and tostring(tid) == tostring(id)) or event == "rednet_message" then
			break
		end
	end
		
	setCurrentMode("")
	
	if event == "rednet_message" then
		if protocol == nuclearControlProt then
			msg = command(id, msg.msg)
		elseif tostring(protocol) == "dns" then
			dbug("Sending dns msg to id: "..tostring(id).." computerID: "..tostring(os.getComputerID()).." protocol: "..tostring(protocol))
			rednet.open(modem)
			rednet.send(tonumber(id), tostring(os.getComputerID()), tostring(protocol))
			rednet.close(modem)
		end
	elseif event == "timer" then
		systemCycle()
	end
	
	os.cancelTimer(tid)
	
end

function init ()

	local modem = getPeripheral("modem")
	local id = 0
	local msg = ""
	
	os.sleep(5)
	
	while msg ~= "startup"
		rednet.open(modem)
		id, msg = rednet.receive()
		rednet.close(modem)
	end
	
	rednet.open(modem)
	rednet.host(tostring(nuclearControlProt), tostring(tostring(nuclearControlProt)..tostring(os.getComputerID())))
	rednet.close(modem)
	
end

function systemCycle ()
	local temp = reactor.getHeat()
	local maxTemp = reactor.getMaxHeat()
	local shutDownTemp = maxTemp / 5
	local invSize = reactor.getInventorySize()
	local coolDown = false
	local mode = currentMode
	local partsRdy = 0
	local uraniumRdy = 0
	
	dbug("Beginning Cycle.")
	
	if temp > shutDownTemp then
		mode = "cooldown"
	end
	
	if energyCell.getEnergyStored()/energyCell.getMaxEnergyStored() >= 1 then
		mode = "cooldown"
	end
	
	for i = 1, invSize do
		
		local item = reactor.getStackInSlot(i)
		
		if item ~= nil then
			
			dbug("Item name: "..tostring(item["name"]).." Item dmg: "..tostring(item["dmg"]).." item max_dmg: "..tostring(item["max_dmg"]).." item_dmg/item_max_dmg: "..tostring(item["dmg"]/item["max_dmg"]))
			
			if item["dmg"]/item["max_dmg"] < .05 or (item["name"] == "reactorUraniumQuad") then
				partsRdy = partsRdy + 1
			end
			
			if item["dmg"]/item["max_dmg"] > .5 and item["name"] ~= "reactorUraniumQuad" then
				mode = "cooldown"
				break
			end
			
			if item["dmg"]/item["max_dmg"] > .95 and item["name"] == "reactorUraniumQuad" then
				mode = "shutdown"
				break
			end
		end
	end
	
	dbug("invSize: "..tostring(invSize).." partsRdy: "..tostring(partsRdy))
	dbug("Energy: "..tostring(energyCell.getEnergyStored()/energyCell.getMaxEnergyStored()))
	
	if invSize - 4 <= partsRdy and energyCell.getEnergyStored()/energyCell.getMaxEnergyStored() < 1 then
		mode = "energy"
	end
	
	setCurrentMode(mode)
	
end

function main ()

	init()
	
	while true do
		wait(cycle)
	end
	
end

main()