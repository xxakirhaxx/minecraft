local reactor = peripheral.wrap("back")
local cycle = 5

function getNuclearControlId ()
	local event = ""
	local id = ""
	local msg = ""
	
	rednet.open("bottom")
	while msg ~= "nuclearControl" do
		event, id, msg  = os.pullEvent()
	end
	rednet.send(id, "nuclearControl")
	rednet.close("bottom")
	return id
end

function sendReactorInfo ()

	local reactorInfo = {getHeat = reactor.getHeat(), getMaxHeat = reactor.getMaxHeat(), getEUOutput = reactor.getEUOutput()}
	
	rednet.open("bottom")
	rednet.send(nuclearControlId, reactorInfo)
	rednet.close("bottom")
	
end

local nuclearControlId = getNuclearControlId()

function coolDownMode ()
	redstone.setOutput("back", false)
	redstone.setOutput("right", false)
	redstone.setOutput("top", false)
	redstone.setOutput("left", true)
	return "COOLDOWN"
end

function energyMode ()
	redstone.setOutput("back", true)
	redstone.setOutput("right", false)
	redstone.setOutput("top", true)
	redstone.setOutput("left", false)
	return "ENERGY"
end

function shutDownMode ()
	redstone.setOutput("back", false)
	redstone.setOutput("right", true)
	redstone.setOutput("top", false)
	redstone.setOutput("left", false)
	return "SHUTDOWN"
end

function display (reactor, mode)
	term.clear()
	print("Current Temperature: ", reactor.getHeat())
	print("Max Temperature: ", reactor.getMaxHeat())
	print("Shutdown Temperature: ", reactor.getMaxHeat() / 5)
	print("System State: ", mode)
	
end

function command (cmd)
	local event = ""
	local id = ""
	local msg = ""
	
	if cmd == "shutdown" then
		shutDownMode()
		while msg ~= "start" and id ~= nuclearControlId do
			rednet.open("bottom")
			event, id, msg = os.pullEvent()
			rednet.close("bottom")
		end
	elseif cmd == "stop" then
		coolDownMode()
		while msg ~= "start" and id ~= nuclearControlId do
			
			os.startTimer(cycle)
			
			rednet.open("bottom")
			event, id, msg = os.pullEvent()
			rednet.close("bottom")
			
			sendReactorInfo()
		end
	end	
end

function wait (num)
	event = {"", "", "", "", "", ""}
	os.startTimer(num)

	while true do
		rednet.open("bottom")
		event[1], event[2], event[3], event[4], event[5], event[6]  = os.pullEvent()
		rednet.close("bottom")
		
		if event[1] == "timer" or event[1] == "rednet_message" then
			break
		end
	end
		
	sendReactorInfo()
	
	if event[1] == "rednet_message" and event[2] == nuclearControlId then
		command(event[3])
		wait(num)
	end
	
	return event
end


while true do
	local temp = reactor.getHeat()
	local maxTemp = reactor.getMaxHeat()
	local shutDownTemp = maxTemp / 5
	local invSize = reactor.getInventorySize()
	
	display(reactor, energyMode())
	
	-- Lock into cool down mode if  temp is to high until temp is 0
	if temp > shutDownTemp then
		while reactor.getHeat() > 1 do
			display(reactor, coolDownMode())
			wait(cycle)
		end
		display(reactor, energyMode())
	end
	
	for i = 1, invSize do
		local item = reactor.getStackInSlot(i)
		if item ~= nil then
			--Check parts dmg, if any is too high send system into cool down mode
			if item["dmg"]/item["max_dmg"] > .5 and item["name"] ~= "reactorUraniumQuad" then
				while reactor.getStackInSlot(i)["dmg"]/item["max_dmg"] > .05 do
					display(reactor, coolDownMode())
					wait(cycle)
				end
				display(reactor, energyMode())
			end
			
			--Check fuel rod dmg, if dmg is too high shut down 
			if item["dmg"]/item["max_dmg"] > .95 and item["name"] == "reactorUraniumQuad" then
				while reactor.getStackInSlot(i)["dmg"]/item["max_dmg"] > .95 do
					display(reactor, shutDownMode())
					wait(cycle)
				end
				display(reactor, energyMode())
			end
		end
	end
	wait(cycle)
end