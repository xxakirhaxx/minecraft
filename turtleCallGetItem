local args = { ... }

function getPeripheral (name)
	for i = 1, #peripheral.getNames() do
		if peripheral.getType(peripheral.getNames()[i]) == name then
			return peripheral.getNames()[i]
		end
	end
end

local chest = peripheral.wrap(getPeripheral("ender_chest"))
local modem = getPeripheral("modem")
local getItemProt = "getItem"
local giveItemProt = "giveItem"
local wiredProt = "wired"


function init ()

	
end

function shutdown ()

end

function main ()
	
	if #args < 2 then return end

	if #args > 3 then return end

	init()
	
	local id = 0
	local msg = {}
	local dist = 0
	local protocol = ""
	local bool = false
	local openConnection = {id = os.getComputerID(), sProt = getItemProt, cmd = "openConnection"}
	local frequency = 0
	local amount = 0
	local itemName = args[1]
	local slot = tonumber(args[2])
	
	if args[3] == nil then
		amount = 1
	else
		amount = tonumber(args[3])
	end

	if turtle.getItemCount(slot) > 0 then return end

	local request = {id = os.getComputerID(), sProt = getItemProt, cmd = "getItem", itemName = itemName, amount = amount}
	local closeConnection = {id = os.getComputerID(), sProt = getItemProt, cmd = "closeConnection"}
	
	rednet.open(modem)
	rednet.send(rednet.lookup(wiredProt, wiredProt), openConnection, giveItemProt)
	rednet.close(modem)
	
	repeat
		rednet.open(modem)
		id, msg, dist, protocol = rednet.receive(getItemProt)
		rednet.close(modem)
	until msg.frequency ~= 0
	
	chest.setFrequency(frequency)
	
	rednet.open(modem)
	rednet.send(rednet.lookup(wiredProt, wiredProt), request, giveItemProt)
	rednet.close(modem)
	

	repeat
		rednet.open(modem)
		id, msg, dist, protocol = rednet.receive(getItemProt)
		rednet.close(modem)
	
		if type(msg) ~= "table" then msg = {sent = false} end
		
		if msg.sent == nil then msg = {sent = false} end

	until msg.sent == true
	
	turtle.select(slot)
	turtle.suckDown(amount)
	chest.setFrequency(0)
	
	rednet.open(modem)
	rednet.send(rednet.lookup(wiredProt, wiredProt), closeConnection, giveItemProt)
	rednet.close(modem)
	
	
	shutdown()
end

main()