function getPeripheral (name)
	for i = 1, #peripheral.getNames() do
		if peripheral.getType(peripheral.getNames()[i]) == name then
			return peripheral.getNames()[i]
		end
	end
end

function dns ()

	rednet.open(getPeripheral("modem"))
	local id, msg, p = rednet.receive()
	rednet.send(tonumber(id), tostring(os.getComputerID()), tostring(p))
	rednet.open(getPeripheral("modem"))
	
end

local d = true

function dbug (s)

	if d then print(s) end
	
end

function getUniqueHostName ()

	local i = 1
	
	repeat
		local h = 1
		hostName = "host"..tostring(i)
		i = i+1
		
		rednet.open(getPeripheral("modem"))
		h = rednet.lookup(tostring(hostName))
		rednet.close(getPeripheral("modem"))
		
	until h == nil

	return tostring(hostName)
end

function startHost ()

	local hostName = getUniqueHostName()
	
	rednet.open(getPeripheral("modem"))
	rednet.host(hostName, hostName)
	rednet.close(getPeripheral("modem"))
	
	return tostring(hostName)
end

function endHost (hostName)
	rednet.open(getPeripheral("modem"))
	rednet.unhost(hostName,hostName)
	rednet.close(getPeripheral("modem"))
end

function send (id, msg, protocol,...)

	local modem = getPeripheral("modem")
	local lookup = nil
	local sProt = nil
	local rProt = nil
	
	if select(1,...) ~= nil then lookup = select(1,...) end
	if select(2,...) ~= nil then sProt = select(2,...) end
	if select(3,...) ~= nil then rProt = select(3,...) end
	
	rednet.open(modem)
	if lookup ~= nil then id = tonumber(rednet.lookup(lookup, lookup)) end
	local rid = tonumber(os.getComputerID())
	
	dbug("id: "..tostring(tonumber(id)).." protocol: "..tostring(protocol))
	
	rednet.send(tonumber(id), {id = tonumber(rid), sProt = tostring(sProt), rProt = tostring(rProt), msg = msg}, tostring(protocol))
	rednet.close(modem)

end

function receive (protocol)

	local modem = getPeripheral("modem")
	local id = 0
	local msg = {}
	local p = ""
	
	repeat
		rednet.open(modem)
		id, msg, p = rednet.receive()
		rednet.close(modem)
		
		if p == "dns" then
			rednet.open(modem)
			rednet.send(tonumber(id), tostring(os.getComputerID()), tostring(p))
			rednet.close(modem)		
		end
		
	until p == protocol
	
	return msg
end

local interface = peripheral.wrap(getPeripheral("tileinterface"))
local interfaceSide = "south"
local getItemProt = "getItem"
local giveItemProt = "giveItem"
local checkChestProt = "checkChest"
local wirelessProt = "wireless"

function openConnection (msg)

	dbug("openConnection: "..tostring(msg))
	
	local m = {id = msg.id, cmd = "getFrequency"}
	local i = 0
	local frequency = 0
	local protocol = ""
	
	repeat

		dbug("Sending 0 msg: "..tostring(m).." protocol: "..tostring(getItemProt).." lookup: "..tostring(checkChestProt))
		
		send(0, m, getItemProt, checkChestProt)
		
		frequency = receive(checkChestProt)

		if frequency.msg.frequency == 0 then os.sleep(5) end
		
	until frequency.msg.frequency ~= 0
	
	m = {frequency = frequency.msg.frequency}

		dbug("Sending 0 msg: "..tostring(m).." protocol: "..tostring(getItemProt).." lookup: "..tostring(wirelessProt).." sProt: "..tostring(msg.rProt))
		
	send(0, m, getItemProt, wirelessProt, msg.rProt)
	
end

function closeConnection (msg)

	dbug("closeConnection: "..tostring(msg))
	
	local m = {id = msg.id, cmd = "releaseFrequency"}
	local i = 0
	local closed = false
	local protocol = ""
	
	repeat
	
		dbug("Sending 0 msg: "..tostring(m).." protocol: "..tostring(getItemProt).." lookup: "..tostring(checkChestProt))
		
		send(0, m, getItemProt, checkChestProt)
		
		closed = receive(checkChestProt)

		if not closed.msg.success then os.sleep(5) end
		
	until closed.msg.success == true
	
end

function sendItem(msg)

	dbug("sendItem: "..tostring(msg))
	
	local id = 0
	local m = {}
	local protocol = ""
	
		
	repeat

		m = {id = msg.id, cmd = "openFrequency"}
		
		dbug("Sending 0 msg: "..tostring(m).." protocol: "..tostring(getItemProt).." lookup: "..tostring(checkChestProt))
		
		send(0, m, getItemProt, checkChestProt)
				
		m = receive(checkChestProt)

		if not m.msg.success then os.sleep(5) end
		
	until m.msg.success == true

	for i = 1, #interface.getAvailableItems() do
		if msg.msg.itemName == interface.getItemDetail(interface.getAvailableItems()[i].fingerprint).basic().display_name then
			if interface.getItemDetail(interface.getAvailableItems()[i].fingerprint).basic().max_size < msg.msg.amount then
				msg.msg.amount = interface.getItemDetail(interface.getAvailableItems()[i].fingerprint).basic().max_size
			end
			interface.exportItem(interface.getAvailableItems()[i].fingerprint, interfaceSide, msg.msg.amount)
		end
	end

	repeat

		m = {id = msg.id, cmd = "closeFrequency"}
		
		dbug("Sending 0 msg: "..tostring(m).." protocol: "..tostring(getItemProt).." lookup: "..tostring(checkChestProt))
		
		send(0, m, getItemProt, checkChestProt)
				
		m = receive(checkChestProt)

		if not m.msg.success then os.sleep(5) end
		
	until m.msg.success == true
		
	m = {sent = true, itemName = itemName, amount = amount}
	
	dbug("Sending 0 msg: "..tostring(m).." protocol: "..tostring(getItemProt).." lookup: "..tostring(wirelessProt).." sProt: "..tostring(msg.rProt))
	
	send(0, m, getItemProt, wirelessProt, msg.rProt)
	
end
 
function init ()
		
	print("Initializing")
	
	rednet.open(getPeripheral("modem"))
	rednet.host(getItemProt, getItemProt)
	rednet.close(getPeripheral("modem"))
	
	print("Initialization complete")
end

function shutdown ()

	rednet.open(getPeripheral("modem"))
	rednet.unhost(getItemProt, getItemProt)
	rednet.close(getPeripheral("modem"))
	
end

function main ()

	init()
	
	while true do
	
		local msg = {}
		
		msg = receive(giveItemProt)
		
		dbug("Received message "..tostring(msg))
		
		if msg.msg.cmd == "openConnection" then
			openConnection(msg)
		elseif msg.msg.cmd == "getItem" then
			sendItem(msg)
		elseif msg.msg.cmd == "closeConnection" then
			closeConnection(msg)
		end
			
	end
	
	shutdown()
end

parallel.waitForAny(main(),main(),main(),main())
