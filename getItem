
function getPeripheral (name)
	for i = 1, #peripheral.getNames() do
		if peripheral.getType(peripheral.getNames()[i]) == name then
			return peripheral.getNames()[i]
		end
	end
	
	return nil
end

local interface = peripheral.wrap(getPeripheral("tileinterface"))
local modem = getPeripheral("modem")
local checkChestId = 0
local interfaceSide = "south"
local getItemProt = "getItem"
local giveItemProt = "giveItem"
local checkChestProt = "checkChest"

function openConnection (rid, id)

	local msg = {id = id, cmd = "getFrequency"}
	local i = 0
	local f = 0
	local dist = 0
	local protocol = ""
	
	repeat
		rednet.open(modem)
		rednet.send(checkChestId, msg, getItemProt)
		rednet.close(modem)
		
		rednet.open(modem)
		i, f, dist, protocol = rednet.receive(checkChestProt)
		rednet.close(modem)

		if f == 0 then os.sleep(5) end
		
	until f ~= 0
	
	msg = {id = id, frequency = f}

	rednet.open(modem)
	rednet.send(rid, msg, getItemProt)
	rednet.close(modem)	
	
end

function closeConnection (id)

	local msg = {id = id, cmd = "releaseFrequency"}
	local i = 0
	local closed = false
	local dist = 0
	local protocol = ""
	
	repeat
		rednet.open(modem)
		rednet.send(checkChestId, msg, getItemProt)
		rednet.close(modem)
		
		rednet.open(modem)
		i, closed, dist, protocol = rednet.receive(checkChestProt)
		rednet.close(modem)

		if not closed then os.sleep(5) end
		
	until closed == true
	
end

function sendItem(itemRequestId, rid, itemName, amount)

	local id = 0
	local msg = false
	local dist = 0
	local protocol = ""
	
		
	repeat
		rednet.open(modem)
		rednet.send(checkChestId, {id = itemRequestId, cmd = "openFrequency"}, getItemProt)
		rednet.close(modem)
				
		rednet.open(modem)
		id, msg, dist, protocol = rednet.receive(checkChestProt)
		rednet.close(modem)	

		if not msg then os.sleep(5) end
		
	until msg == true

	for i = 1, #interface.getAvailableItems() do
		if itemName == interface.getItemDetail(interface.getAvailableItems()[i].fingerprint).basic().display_name then
			if interface.getItemDetail(interface.getAvailableItems()[i].fingerprint).basic().max_size < amount then
				amount = interface.getItemDetail(interface.getAvailableItems()[i].fingerprint).basic().max_size
			end
			interface.exportItem(interface.getAvailableItems()[i].fingerprint, interfaceSide, amount)
		end
	end

	repeat
		rednet.open(modem)
		rednet.send(checkChestId, {id = itemRequestId, cmd = "closeFrequency"}, getItemProt)
		rednet.close(modem)
				
		rednet.open(modem)
		id, msg, dist, protocol = rednet.receive(checkChestProt)
		rednet.close(modem)	

		if not msg then
			os.sleep(5)
		end
	until msg == true	
		
		
	rednet.open(modem)
	rednet.send(rid, {id = itemRequestId, sent = true, itemName = itemName, amount = amount}, getItemProt)
	rednet.close(modem)
	
end
 
function init ()
		
	print("Initializing")
	
	rednet.host(getItemProt, getItemProt)
	os.sleep(5)
	checkChestId = rednet.lookup(checkChestProt, checkChestProt)
	
	print("Initialization complete")
end

function shutdown ()

	rednet.unhost(getItemProt, getItemProt)
	
end

function main ()

	init()
	
	while true do
	
		local id = 0
		local msg = {}
		local dist = 0
		local protocol = ""
		
		rednet.open(modem)
		id, msg, dist, protocol = rednet.receive(giveItemProt)
		rednet.close(modem)
		
		print("id: "..id.." msg: "..tostring(msg))

		if msg.cmd == "openConnection" then
			openConnection(id, msg.id)
		elseif msg.cmd == "getItem" then
			sendItem(msg.id, id, msg.itemName, msg.amount)
		elseif msg.cmd == "closeConnection" then
			closeConnection(msg.id)
		end

	
	end
	
	shutdown()
end

main()
